*******************************************************************************

                                    USAGE

-------------------------------------------------------------------------------

    Make:
    -----
        make all

    Run:
    ----
        to make data
        ** FROM WITHIN NETWORK DIRECTORY **
        ./make_data
        or to make a specific file use
        ./make_data make_xor.py

    Test:
    -----
        ./test

    Config:
    -------
        See recommended configs for each dataset below


*******************************************************************************

                                TIMELINE

-------------------------------------------------------------------------------

    Finish pulser module with gaussian mean firing rate


    Simulate a layer for 10 rounds.

*******************************************************************************

                                ORGANIZATION

-------------------------------------------------------------------------------

    [ snn ]
       |
       |-------- [ scripts ]
       |            |------ shell scripts to run default data
       |
       |-------- [ src ]
       |            |------ all .cpp files
       |            |------ snn.cpp (main function)
       |
       |-------- [ build ]
       |            |
       |            |------ [ apps ]
       |            |           |------ snn (executable)
       |            |           |------ config.snn
       |            |
       |            |------ [ objects ]
       |                        |------ all .o files
       |
       |-------- [ include ]
       |            |------- all .h files
       |
       |
       |-------- [ datasets ]
       |            |------- all .data files that contain input data bytes
       |            |------- all python tools for pre-processing data
       |
       |-------- [ analysis ]
                    |------- [ output ]
                    |            |------- all program output analysis files
                    |
                    |------- python tools for data analysis


*******************************************************************************

                                C++ MODULES

-------------------------------------------------------------------------------

    Specs Module:
    -------------
        SpecSheet object that reads from config.snn in /build/apps/ directory
        Contains all initialization data for the snn

    Layer Module:
    -------------
        Operates on an array of neurons at a time. Room for parallelization.

    Network Module:
    ---------------
        Initializes each layer
        Controls flow of input data into network

    Measure Module:
    ---------------
        Given a network object, stores extensive amounts of data about the
        runtime state of the network.

        The output of this will be fed into the /analysis/output/ directory

    Pulse Module:
    -------------
        Turns fixed value input data into a spike train

    Reader Module:
    --------------
        Parse the input data and reads the binary file


*******************************************************************************

                                DATA FORMATTING

-------------------------------------------------------------------------------

    Input .data files should be in the following format:


============== example.data =================

60000 INPUTS, 128 INPUT CHANNELS, 10 OUTPUT CHANNELS
|----128 floats as bytes------|------128 floats as bytes---|------128 floats---
----|....|---10 floats as bytes --|----10 floats as bytes-----|...|EOF|

==============================================

No newline characters between inputs or between labels and inputs, just a
continuous series of bytes.


    -       -       -       -       -       -       -       -       -       -

j=neuron index (int)
l=layer index (int)
inp=input (float)
spike=spike (int)
V=voltage (float)
Vstdp=learning voltage (float)
t=time of spike (float)
Wj=weight (array of floats)
nprev=number of nodes in previous layer (int)
Linh=learning inhibition rate (float)

    Output .out files should be in the following format:


What we can know:
----------------

Which layer? index. Which filter within layer (if applicable)? sub-index.
Which neuron within layer? 2d coordinate.
What is it's voltage? float.
What is it's stdp acummulation? float.
What is the timestamp? integer.

Weights (sparse) (2d matrix (can be easily converted to 1d) )
**Each neuron has its own weights 2d matrix**
What is the timestamp?



================ example.out =================

Layer,row,column,voltage,stdp,time,weight_array,
X,x,x,x,x,x,[x,x]

==============================================

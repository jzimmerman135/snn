*******************************************************************************

                                    USAGE

-------------------------------------------------------------------------------

    Make:
    -----
        make

    Prepare input data:
    -------------------
        ./make_data
        or to make a specific file use
        ./make_data make_xor.py

    Run:
    -----
        ./run train_file.data test_file.data log_filename

   
    Customize:
    ----------
	Building a custom architecture is easy using the build_network function at the 
	top of main.c, just define hyper parameters and add layer or filter.

    Example usage:
    --------------
	./make_data make_xor.py
	./run xor.data xor.data xor_log

    This will produce a rather large csv file with the runtime data.
    When classification works we will build a better interface to see it
    learning.

	
    Reach out to jacob.zimmerman135@gmail.com for questions about the C program
    
    Reach out to jacob.blum@tufts.edu for questions about the data processing 
    and analyis

*******************************************************************************

                                ORGANIZATION

-------------------------------------------------------------------------------

    [ network ]
       |
       |-------- [ scripts ]
       |            |------ shell scripts to run default data
       |
       |-------- [ src ]
       |            |------ all .c files
       |            |------ main.c (main function, use to customize topology)
       |
       |-------- [ build ]
       |            |
       |            |------ [ apps ]
       |            |           |------ program (executable)
       |            |
       |            |------ [ objects ]
       |                        |------ all .o files
       |
       |-------- [ include ]
       |            |------- all .h files
       |
       |
       |-------- [ datasets ]
       |            |------- all .data files that contain input data bytes
       |            |------- all python tools for pre-processing data
       |
       |-------- [ analysis ]
                    |------- [ output ]
                    |            |------- all program output analysis files
                    |
                    |------- python tools for data analysis


*******************************************************************************

                                C MODULES

-------------------------------------------------------------------------------

    Filter Module:
    -------------
	Contains a custom structure of feature maps. Basically multiple layers
	connected by inter-map inhibition. 

    Layer Module:
    -------------
        Operates on an array of neurons at a time. Room for parallelization.

    Network Module:
    ---------------
        Initializes each layer
        Controls flow of input data into network

    Logger Module:
    ---------------
        Given a network object, stores extensive amounts of data about the
        runtime state of the network.

        The output of this will be fed into the /analysis/output/ directory

    Pulse Module:
    -------------
        Turns fixed value input data into a spike train

    Reader Module:
    --------------
        Parse the input data and reads the binary file


*******************************************************************************

                                DATA FORMATTING

-------------------------------------------------------------------------------

    Input .data files should be in the following format:


============== example.data =================

60000 INPUTS, 128 INPUT CHANNELS, 10 OUTPUT CHANNELS
|----128 floats as bytes------|------128 floats as bytes---|------128 floats---
----|....|---10 floats as bytes --|----10 floats as bytes-----|...|EOF|

==============================================

No newline characters between inputs or between labels and inputs, just a
continuous series of bytes.


    -       -       -       -       -       -       -       -       -       -

j=neuron index (int)
l=layer index (int)
inp=input (float)
spike=spike (int)
V=voltage (float)
Vstdp=learning voltage (float)
t=time of spike (float)
Wj=weight (array of floats)
nprev=number of nodes in previous layer (int)
Linh=learning inhibition rate (float)

    Output .out files should be in the following format:


What we can know:
----------------

Which layer? index. Which filter within layer (if applicable)? sub-index.
Which neuron within layer? 2d coordinate.
What is it's voltage? float.
What is it's stdp acummulation? float.
What is the timestamp? integer.

Weights (sparse) (2d matrix (can be easily converted to 1d) )
**Each neuron has its own weights 2d matrix**
What is the timestamp?



================ example.out =================

neuron_index,time,layer,layer_dimensions,row,column,voltage,stdp,weight_array,
X,x,x,(x,y),x,x,x,x,[x,x],
15,0.5,3,(4,6),4,3,130,-40,[10,20,30,40,20,30,10,20,30,40,20,30,10,20,30,40,20,30,10,20,30,40,20,30]

==============================================
